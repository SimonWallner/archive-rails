<%= form_for(@game, :html => {:id => "edit-game" }) do |f| %>
	<% if @game.errors.any? %>
		<div id="error_explanation">
			<h2><%= pluralize(@game.errors.count, "error") %> prohibited this game from being saved:</h2>

			<ul>
			<% @game.errors.full_messages.each do |msg| %>
				<li><%= msg %></li>
			<% end %>
			</ul>
		</div>
	<% end %>

	<div class="field">
		<%= f.label :title, 'Game Title: '%><br />
		<%= f.text_field :title %>
	</div>
	
	<div class="field">
		<%= f.label :description, 'Game Description: '%><br />
		<div class="field-help">
			<p>
				You can use simplified markup to structure the text. <strong>Headings</strong> are created by prefixing a line with <span class="code">#</span>. <span class="code"># First Heading</span> or <span class="code">## Second Heagin</span> and so forth. <strong>Paragraphs</strong> are automatically created by inserting new-lines in the text and text can be <strong>emphasised</strong> or set in <strong>bold face</strong> with <span class="code">*emphasis*</span> and <span class="code">**bold face**</span>. <strong>Lists</strong> are created with <span class="code">* list item</span> or <span class="code">1. list item</span>. You can add <strong>cross references</strong> to other articles by typing the <span class="code">@</span> character followed by the first letters of the article you want to link to. You can also manually add <strong>links</strong> in the following form <span class="code">[Description](url)</span> e.g. <span class="code">[Wikipedia](http://www.wikipedia.org/)</span>
			</p> 
		</div>
		<%= f.text_area :description %>
	</div>

	<div class="field">
		<%= f.label :image, 'Teaser Image: ' %><span class="field-help">This image is shown on the overview page and on top of this article.</span><br />
		<div class="field" id="profilepicfields">
			Currently selected image:
			<% imguploader = ImageUploader.new %>
			<% if not @game.image_url == imguploader.default_url %>
				<%= f.label :image, (File.basename f.object.image_url.to_s)%>
				<%= image_tag f.object.image_url.to_s, :class => 'thumb rounded' %>

				<%= f.label :remove_image, "Remove teaser image?" %>
				<%= f.check_box :remove_image %><br/>
			<% end %>
			Upload new teaser image: <%= f.file_field :image %>
		</div>
		<div class="field" >
			<!-- iterate through all the available videos for a game and create a field for them
			<f.text_area :video mit id!? > <remove button>
			end	 -->
			<%= f.label 'Embed Videos: ' %><span class="field-help">Embed YouTube of Vimeo videos by pasting the video url in the below field. CLick the "Add Video" link to add videos.</span>
			<div id="videos" >
				<%= f.fields_for :videos do |builder| %>
						<%= render :partial => 'video_fields', :locals => {:builder => builder} %>
				<%end %>
				<p><%= link_to_add_video_fields "Add Video", f, :videos %></p>
			</div>
			<br/>
		</div>
		<div class="field">
			<%= f.label 'Screenshots: ' %><br/>
			<div id="screenshots" >
				<%= f.fields_for :screenshots do |builder| %>
						<%= render :partial => 'screenshot_fields', :locals => {:builder => builder} %>
				<%end%>
				<p><%= link_to_add_screenshot_fields "Add Screenshot", f, :screenshots %></p>
			</div>
		</div>

		<div>
			<!-- 
			<div class="newFieldsDiv">
				<script type="text/javascript">
					loadfields('<%= begin game_url rescue new_game_url end %>.json');
				</script>
			</div>
			<%= 
				submit_tag "Add Field", :type => 'button', :id => 'addFieldButton' ,
					:onclick => 'addField(this,gamefields);'
			%> -->

			<%
				@help = { # might want to refactor that into the view...
					'defunct' => 'Date the studio/organisation became defunct and an optional reason (e.g. merged with XY, ...)',
					'founded' => 'Founding date of this studio/organisation.',
					'official name' => 'Official name of the studio/organisation.',
					'locations' => 'Comma separated list of locations where this studio/organisation is or has been active.',
					'userdefined' =>'Userdefined field to add additional categories and data that does not match any of the other fields.',
					'External Links' => 'Links to external websites using the simplified markup syntax. <span class="code">[description](http://example.com)',
					'Developer' => 'Developers that contributed to this game. Add a developer\'s name and and optional role (e.g. Artist, Lead Programmer, ...). If the developer is found in the databse the field turns green.',
					'Publisher' => 'Publishers of the game and additional optional information (e.g. publishing platform, region, ...).',
					'Distributor' => 'Distributors of the game and additional optional information (e.g. distribution medium, region, ...).',
					'Credits' => 'Additional credits with optional information (e.g. localisation, marketing, testing, ...).',
					'release dates' => 'Release dates with additional optional information (e.g. platform, region, ...).',
					'Series' => 'Prequels/sequels or other games in a series with additional optional information (e.g. prequel, sequel, spin-off, ...).',
					'Review Scores' => 'Individual review scores. Please also link to the review <span class="code">[description](http://example.com)</span>',
					'Aggregate Scores' => 'Aggregated review scores. Please also link to the score aggregator <span class="code">[description](http://example.com)</span>'
				};
			%>

			<% MixedFieldType.all.each do |type| %>
				<div class="field">
					<strong><%= type.name %></strong>: <div class="field-help"><%= raw @help[type.name] %></div><br>

					<% iterator = @game.mixed_fields.where(mixed_field_type_id: type.id).each_with_index do |entry, i| %>
						<%= if entry.developer
							text_field_tag("#{type.name}_name_#{i}", entry.developer.name, 'data-reference' => "{developer: #{entry.developer.id}}", class: "#{type.name}_link linkFound")
						elsif entry.company
							text_field_tag("#{type.name}_name_#{i}", entry.company.name, 'data-reference' => "{company: #{entry.company.id}}", class: "#{type.name}_link linkFound")
						else
							text_field_tag("#{type.name}_name_#{i}", entry.not_found, class: "#{type.name}_link")
						end %>
						<%= text_field_tag("#{type.name}_info_#{i}", entry.additional_info, class: 'developer_text') %>
						<button type="button" class="addDeveloperButton" value="<%= type.name %>"> + </button>
					<% end %>
					<%= text_field_tag("#{type.name}_name_#{iterator.length}", '', 'data-reference' => 'no link', class: "#{type.name}_link") %>
					<%= text_field_tag("#{type.name}_info_#{iterator.length}", '', class: 'developer_text') %>
					<button type="button" class="addDeveloperButton" value="<%= type.name %>"> + </button>
					<br>
				</div>
			<% end %>
			
			<!-- TODO
				fix genres, etc...
				seems like the actual forms are generated with js -->
			<div class="field-help" id="all_genres">
			available:
				<%= render partial: 'list', locals: {list: Genre.all} %>
			</div>

			<div id="all_platform" class="field-help">
				available:
				<%= render partial: 'list', locals: {list: Platform.all} %>
			</div>

			<div id="all_mode" class="field-help">
				available:
				<%= render partial: 'list', locals: {list: Mode.all} %>
			</div>
			<div id="all_media" class="field-help">
				available:
				<%= render partial: 'list', locals: {list: Medium.all} %>
			</div>
			<div id="all_tags" class="field-help">
				available:
				<%= render partial: 'list', locals: {list: Tag.all} %>
			</div>

			<div class="actions">
			<%= f.submit @game.new_record? ? "Create Game Article" : "Update Game Article" %>
			</div>
		</div>
	</div>

<% end %>